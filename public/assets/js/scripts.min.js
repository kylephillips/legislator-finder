/**
* Global JS Vars
*/
var map_styles = [
  {
    "stylers": [
      { "visibility": "off" }
    ]
  },{
    "featureType": "landscape",
    "stylers": [
      { "visibility": "on" },
      { "color": "#151543" }
    ]
  },{
    "featureType": "road.highway",
    "elementType": "geometry",
    "stylers": [
      { "visibility": "simplified" },
      { "color": "#1bad90" }
    ]
  },{
    "featureType": "road.highway",
    "elementType": "labels.text.fill",
    "stylers": [
      { "visibility": "on" },
      { "color": "#ffffff" }
    ]
  },{
    "featureType": "road.highway",
    "elementType": "labels.text.stroke",
    "stylers": [
      { "visibility": "on" },
      { "color": "#151540" }
    ]
  },{
    "featureType": "administrative.province",
    "elementType": "geometry",
    "stylers": [
      { "visibility": "on" },
      { "color": "#232254" }
    ]
  },{
    "featureType": "administrative.locality",
    "elementType": "labels.text.fill",
    "stylers": [
      { "visibility": "on" },
      { "color": "#3696da" }
    ]
  },{
    "featureType": "administrative.locality",
    "elementType": "labels.text.stroke",
    "stylers": [
      { "visibility": "simplified" },
      { "color": "#151543" }
    ]
  },{
    "featureType": "road.arterial",
    "elementType": "geometry",
    "stylers": [
      { "visibility": "simplified" },
      { "color": "#27275e" }
    ]
  },{
    "featureType": "water",
    "stylers": [
      { "visibility": "on" },
      { "color": "#0e0e33" }
    ]
  },{
    "featureType": "administrative.neighborhood",
    "elementType": "geometry",
    "stylers": [
      { "visibility": "on" }
    ]
  }
];

var state_centers_json = '/assets/js/state-centers.json';
var federal_congressional_districts_geojson = '/assets/js/congressional-districts-115.geojson';
var state_to_fips_json = '/assets/js/state-to-fips.json';
/**
* Toggles 
*/
var Toggle = function()
{
	var plugin = this;
	var $ = jQuery;

	plugin.activeBtn = '';
	plugin.activeBlock = '';

	plugin.selectors = {
		toggleBtn : '[data-toggle]',
		toggleBlock : '[data-toggle-id]'
	}

	plugin.bindEvents = function()
	{
		$(document).on('click', plugin.selectors.toggleBtn, function(e){
			e.preventDefault();
			plugin.activeBtn = $(this);
			plugin.toggle();
		});
	}

	plugin.toggle = function()
	{
		var target = $(plugin.activeBtn).attr('data-toggle');
		var all_targets = $(plugin.selectors.toggleBlock);

		if ( $('*[data-toggle-id=' + target + ']').is(':visible') ){
			$('*[data-toggle-id=' + target + ']').hide();
			plugin.toggleArrow(true);
			$(document).trigger('element-toggled-hidden', [plugin.activeBtn, $(target)]);
			return;
		}

		$('*[data-toggle-id=' + target + ']').show();
		plugin.toggleArrow(false);
		$(document).trigger('element-toggled-shown', [plugin.activeBtn, $(target)]);
	}

	plugin.toggleArrow = function(closed)
	{
		if ( closed ){
			$(plugin.activeBtn).find('.icon-arrow_up').removeClass('icon-arrow_up').addClass('icon-arrow_down');
			return;
		}
		$(plugin.activeBtn).find('.icon-arrow_down').removeClass('icon-arrow_down').addClass('icon-arrow_up');
	}

	return plugin.bindEvents();
}
/**
* Federal/State locale switch on search form
*/
var LocalSwitch = function()
{
	var plugin = this;
	var $ = jQuery;

	plugin.selectors = {
		switch : 'data-locale-select'
	}

	plugin.bindEvents = function()
	{
		$(document).on('click', '[' + plugin.selectors.switch + '] a', function(e){
			e.preventDefault();
			plugin.switch($(this));
		});
	}

	/**
	* Update the locale
	*/
	plugin.switch = function(button)
	{
		var current = $(button).attr('href');
		$(current).prop('checked', true);	
		$('[' + plugin.selectors.switch + '] a').removeClass('active');
		$(button).addClass('active');

		if ( current == "#state" ){
			$('.switch').addClass('state');
			return;
		}
		$('.switch').removeClass('state');
	}

	return plugin.bindEvents();
}
/**
* Geocodes a user's address using either Google autocomplete places api or Google maps geocoder api
*/
var GeoCoder = function()
{
	var plugin = this;
	var $ = jQuery;

	plugin.lat = null;
	plugin.lng = null;
	plugin.formattedAddress = null;

	plugin.selectors = {
		geoButton : 'data-geolocation-button', // The geolocation button
		form : 'data-address-form', // The form element
		addressInput : 'data-address-input', // The address text input
		latInput : 'data-latitude-input', // The hidden latitude input
		lngInput : 'data-longitude-input', // The hidden longitude input
		formattedAddressInput : 'data-formatted-address-input', // The hidden formatted address input
		submitBtn : 'data-address-submit', // The form submit button
		loadingDiv : 'data-loading', // The loading div
		errorDiv : 'data-error' // The error notification/alert div
	}

	plugin.bindEvents = function()
	{
		$(document).ready(function(){
			plugin.toggleGeoLocation();
			plugin.enableAutoComplete();
		});
		$(document).on('location-changed', function(){
			plugin.populateAddressFields();
		});
		$(document).on('click', '[' + plugin.selectors.submitBtn + ']', function(e){
			e.preventDefault();
			plugin.submitForm();
		});
		$(document).on('click', '[' + plugin.selectors.geoButton + ']', function(e){
			e.preventDefault();
			plugin.geocodeLocation();
		});
	}

	/**
	* Toggle the "Use my location button"
	*/
	plugin.toggleGeoLocation = function()
	{
		if ( location.protocol !== 'https:' ) return;
		if (navigator.geolocation) $('[' + plugin.selectors.geoButton + ']').show();
	}

	/**
	* Geocode using users location
	*/
	plugin.geocodeLocation = function()
	{
		if (!navigator.geolocation){
			plugin.displayError('Your location could not be determined at this time. Try entering an address.')
			return;
		}
		navigator.geolocation.getCurrentPosition(function(position){
			plugin.formattedAddress = 'Your Current Location';
			plugin.lat = position.coords.latitude;
			plugin.lng = position.coords.longitude;
		});
	}

	/**
	* Enable Google Places autocomplete on address field
	*/
	plugin.enableAutoComplete = function()
	{
		var field = $('[' + plugin.selectors.addressInput + ']');
		if ( field.length === 0 ) return;
		var autocomplete = new google.maps.places.Autocomplete(field[0]);
		google.maps.event.addListener(autocomplete, 'place_changed', function(){
			var place = autocomplete.getPlace();
			plugin.formattedAddress = place.formatted_address;
			plugin.lat = place.geometry.location.lat();
			plugin.lng = place.geometry.location.lng();
			$(document).trigger('location-changed');
		});
	}

	/**
	* Click Handler for Submit Button
	*/
	plugin.submitForm = function()
	{
		plugin.toggleLoading(true);
		if ( !plugin.lat && !plugin.lng ){
			plugin.geoCodeAddress();
			return;
		}
		$('[' + plugin.selectors.form + ']').submit();
	}

	/**
	* Populate the hidden address fields
	*/
	plugin.populateAddressFields = function()
	{
		$('[' + plugin.selectors.formattedAddressInput + ']').val(plugin.formattedAddress);
		$('[' + plugin.selectors.latInput + ']').val(plugin.lat);
		$('[' + plugin.selectors.lngInput + ']').val(plugin.lng);
	}

	/**
	* Geocode an address from the input manually
	*/
	plugin.geoCodeAddress = function()
	{
		var address = $('[' + plugin.selectors.addressInput + ']').val();
		
		if ( address === '' ){
			plugin.displayError('Please enter an address.');
			return;
		}

		geocoder = new google.maps.Geocoder();
		geocoder.geocode({
			'address' : address
		}, function(results, status){
			return;
			if ( status == google.maps.GeocoderStatus.OK ){
				plugin.formattedAddress = results[0].formatted_address;
				plugin.lat = results[0].geometry.location.lat();
				plugin.lng = results[0].geometry.location.lng();
				plugin.populateAddressFields();
				plugin.submitForm();
			} else {
				plugin.displayError('The address entered could not be found.');
			}
		});
	}

	/**
	* Toggle Loading State
	*/
	plugin.toggleLoading = function(loading)
	{
		if ( loading ){
			$('[' + plugin.selectors.loadingDiv + ']').show();
			$('[' + plugin.selectors.errorDiv + ']').hide();
			return;
		}
		$('[' + plugin.selectors.loadingDiv + ']').hide();
	}

	/**
	* Display an error
	*/
	plugin.displayError = function(error)
	{
		plugin.toggleLoading(false);
		$('[' + plugin.selectors.errorDiv + ']').text(error).show();
	}

	return plugin.bindEvents();
}
/**
* Load a State Map
*/
var StateMap = function(state, container)
{
	var plugin = this;
	var $ = jQuery;

	plugin.state = state;
	plugin.container = container;

	plugin.centerLat = null;
	plugin.centerLng = null;

	/**
	* Get the Center latitude and longitude for the state
	*/
	plugin.fetchCenter = function()
	{
		$.ajax({
			url : state_centers_json,
			dataType : "json",
			success: function(data){
				for ( var i = 0; i < data.length; i++ ){
					if ( data[i].state !== plugin.state) continue;
					plugin.centerLat = data[i].latitude;
					plugin.centerLng = data[i].longitude;
				}
				plugin.drawStateMap();
			}
		});
	}
		
		
	plugin.drawStateMap = function()
	{
		var state = new google.maps.LatLng(plugin.centerLat, plugin.centerLng);
		map = new google.maps.Map(plugin.container[0], {
		  center: state,
		  zoom: 6,
		  mapTypeId: 'roadmap',
		  styles : map_styles
		});

		layer = new google.maps.FusionTablesLayer({
			styles: [{
				polygonOptions : {
					fillColor: "#1bbc9b",
					strokeColor: "#1bbc9b"
				}
			}],
			suppressInfoWindows: true
		});
		
		// var StateName = "{{ $location->state }}";
		
		layer.setQuery({
			select:'geometry',
			from:"17aT9Ud-YnGiXdXEJUyycH2ocUqreOeKGbzCkUw",
			where:"'id' = '" + plugin.state + "'"
		});
		
		layer.setMap(map);
	}

	return plugin.fetchCenter();
	
}
/**
* Load a Federal House District Map
*/
var FederalHouseDistrictMap = function(district, state, container)
{
	var plugin = this;
	var $ = jQuery;

	plugin.district = district;
	plugin.state = state;
	plugin.container = container;
	plugin.fipsCode = null;

	/**
	* Get the FIPS code for the state
	*/
	plugin.getFipsCode = function()
	{
		$.getJSON(state_to_fips_json, function(data){
			plugin.fipsCode = data[plugin.state];
			plugin.loadGeoJson();
		});
	}
	
	/**
	* Load the Geo JSON, converted from US census data
	* @link https://www.census.gov/geo/maps-data/data/cbf/cbf_cds.html
	* @link http://trac.osgeo.org/gdal/wiki/DownloadingGdalBinaries
	* @link https://medium.com/@govtrack/creating-congressional-district-maps-with-mapbox-4888e4b79cf
	*/
	plugin.loadGeoJson = function()
	{
		$.getJSON(federal_congressional_districts_geojson, function(data){
			var layers = data.features;
			$.each(layers, function(key, val){
				if ( val.properties.STATEFP === plugin.fipsCode && val.properties.CD115FP === plugin.district ) plugin.initializeMap(val);
			});
		});
	}

	/**
	* Initialize the Map
	*/
	plugin.initializeMap = function(json)
	{
		var map;
		map = new google.maps.Map(plugin.container[0], {
			zoom: 4,
			center: {lat: 35.1825687, lng: -100.0268953},
			mapTypeId: 'roadmap',
		  	styles : map_styles
		});
		var geoJson = {
			type: 'FeatureCollection',
			features : [
				json
			]
		}

		map.data.addGeoJson(geoJson);
		map.data.setStyle({
			fillColor: "#1bbc9b",
			strokeWeight: 0
		});

		// Zoom and fit the map to the congressional boundary
		var bounds = new google.maps.LatLngBounds(); 
		map.data.forEach(function(feature){
			feature.getGeometry().forEachLatLng(function(latlng){
				bounds.extend(latlng);
			});
		});
		map.fitBounds(bounds);
	}

	return plugin.getFipsCode();
}
/**
* Legislator Finder Scripts
*/
var LegislatorFinder = function(){
	new Toggle;
	new LocalSwitch;
	new GeoCoder;
}
new LegislatorFinder;